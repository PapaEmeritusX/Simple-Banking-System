type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/Account.java
  visible: true
  text: |
    package banking;

    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.Random;

    public class Account {
        //private static ArrayList<StringBuilder> accounts;
        private StringBuilder cardNumber;
        private StringBuilder pinCode;
        private Random random;
        private double balance;

        public Account() {
            this.cardNumber = new StringBuilder("");
            generateCardNumber();
            this.pinCode = new StringBuilder("");
            generatePinCode();
            this.balance = 0.0;
        }

        public double getBalance() {
            return balance;
        }

        public void setBalance(double balance) {
            this.balance = balance;
        }

        public StringBuilder getPinCode() {
            return pinCode;
        }

        public StringBuilder getCardNumber() {
            return cardNumber;
        }

        public StringBuilder generatePinCode() {
            randomNumberGenerator(this.pinCode, 4);
            return this.pinCode;
        }

        public StringBuilder generateCardNumber() {
            this.cardNumber = new StringBuilder("400000");
            randomNumberGenerator(this.cardNumber, 16);
            return this.cardNumber;
        }

        private void randomNumberGenerator(StringBuilder string, int length) {
            this.random = new Random();
            while(string.length() < length){

                int randomDigit = this.random.nextInt(10);
               // System.out.println(randomDigit);
                string.append(randomDigit);
            }
            //System.out.println(string);

        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Account)) return false;
            Account account = (Account) o;
            return this.cardNumber.equals(account.cardNumber);
        }

        @Override
        public int hashCode() {
            return 0;
        }
    }
  learner_created: true
- name: src/banking/UserTextInterface.java
  visible: true
  text: |
    package banking;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class UserTextInterface {
        private final Scanner scanner;
        private Account cardAccount;
        private final ArrayList<Account> accounts;



        public UserTextInterface(Scanner scanner) {
            this.scanner = scanner;
            this.accounts = new ArrayList<>();
        }

        public void start() {
            mainTextUI();
        }
        private void mainTextUI() {
            while (true) {
                System.out.println("1. Create an account");
                System.out.println("2. Log into account");
                System.out.println("0. Exit");

                int input = Integer.parseInt(scanner.nextLine());

                if (input == 1) {
                    while (true) {
                        this.cardAccount = new Account();
                        if (accounts.contains(this.cardAccount)) {
                            continue;
                        }
                        this.accounts.add(this.cardAccount);
                        break;
                    }
                    System.out.println();
                    System.out.println("Your card has been created");
                    System.out.println("Your card number:\n" + this.cardAccount.getCardNumber());
                    System.out.println("Your card PIN:\n" + this.cardAccount.getPinCode());
                    System.out.println();

                } else if (input == 2) {
                    System.out.println("Enter you card number:");
                    String inputCardNumber = scanner.nextLine();
                    System.out.println("Enter your PIN:");
                    String inputPIN = scanner.nextLine();
                    if (verifyAccount(inputCardNumber, inputPIN)) {
                        System.out.println("You have successfully logged in!");
                        submenuLogIn();
                    } else {
                        System.out.println("Wrong card number or PIN!");
                    }
                } else if (input == 0) {
                    System.out.println("Buy!");
                    return;
                }
            }
        }
        private void submenuLogIn() {
            while (true) {
                System.out.println("1. Balance");
                System.out.println("2. Log out");
                System.out.println("0. Exit");

                int input = Integer.parseInt(scanner.nextLine());
                System.out.println();

                if (input == 1) {
                    System.out.println(this.cardAccount.getBalance());
                } else if (input == 2) {
                    System.out.println("You have successfully logged out!");
                    System.out.println();
                    mainTextUI();
                } else if (input == 0) {
                    System.out.println("Buy!");
                    return;
                }
            }




        }
        private boolean verifyAccount(String inputCardNumber, String inputPIN) {
            for (Account account: this.accounts) {

                String compareCardNumber = new String(account.getCardNumber());
                String comparePIN = new String(account.getPinCode());


                if (inputCardNumber.equals(compareCardNumber)) {
                    if (inputPIN.equals(comparePIN)) {
                        this.cardAccount = account;
                        return true;
                    }
                    return false;
                }
            }
            return false;
        }
    }
  learner_created: true
- name: src/banking/logic/LuhnCardGenerator.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/516/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 26 Jun 2021 14:08:06 UTC
record: 2
